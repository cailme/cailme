[
    {
        "ref": "/blog/homework/",
        "title": "Linux大作业",
        "section": "blog",
        "tags": null,
        "date" : "2022.12.11",
        "body": "Linux大作业完成步骤记录 一、使用Docker，将socket运行在的容器 1.安装docker 1.安装docker，命令：sudo apt install docker.io 2.检查安装是否成功，命令：docker -v\n2.查看镜像 启动docker，命令：service docker start， 查看镜像命令：docker images 安装Node.js后可以提交新的docker镜像实例，安装命令: apt install nodejs 提交新实例，命令: docker commit -m \u0026ldquo;added Node.js\u0026rdquo; -a \u0026ldquo;username\u0026rdquo; \u0026lt;容器ID\u0026gt; \u0026lt;镜像名\u0026gt; 这里我已提交了两个基于ubuntu镜像的新镜像实例，分别为server-ubuntu、client-ubuntu\n3.查看容器 使用命令：docker ps -a，可以查看已有的所有容器(不加-a,仅查看正在运行的)\n3.运行容器，编写socket并测试 1.运行容器可以使用镜像创建新的容器，命令：docker run -it \u0026lt;容器名\u0026gt; 2.也可以进入已有的容器 首先重启容器，命令：docker restart \u0026lt;容器ID\\容器名\u0026gt; 然后进入正在运行的容器，命令：docker attach 容器ID 运行文件，命令：python3 ./文件名\n4.服务端和客户端 我使用python语言编写socket\n服务端 server.py 客户端 client.py 5.导出容器 导出容器至宿主机，命令：docker export 容器ID \u0026gt; name.tar 二、Hugo静态网站 1.安装hugo 1.安装hugo，命令：sudo apt install hugo 2.检查安装是否成功，命令：hugo version\n2.创建个人网站 1.创建个人网站，命令：hugo new site myblog 进入创建的 myblog 目录，克隆主题到 themes 文件命令：git clone https://github.com/nightswinger/hugo-theme-coyote.git themes/coyote \u0026ndash;depth=1\n2.配置config文件 或者把模板中的congfig文件拷贝到网站根目录 命令：cp themes/kiera/exampleSite/config.toml ./\n3.创建blog 命令：hugo new posts/name.md； 编辑blog内容。\n4.网站预览， 对所有已发布和编辑中的文章进行预览，命令：hugo server -D\n5.发布内容 写完文章，预览没问题后，可以更改文章的草稿状态 draft: false，然后编译生成静态网站内容了，命令：hugo -t theme-name\n生成的静态内容都在 public 目录下面： 3. 部署到Web服务器 1.拷贝public 将编译生成的publi目录中的所有文件，拷贝至/var/www/html/目录中 2.测试网页 启动ngin服务，访问Web服务器，测试可以正常访问，部署成功。 4.Docker部署静态网站 1.在 Docker 环境拉取 nginx 镜像 拉取命令：docker pull nginx 查看是否安装成功：docker images\n2.新建并启动 nginx 容器 启动容器，命令:docker run \u0026ndash;name mynginx -p 9999:80 -d nginx\n非首次进入容器要先重启容器，命令：docker restart 容器ID或者name\n然后再进入容器进入正在运行的容器，命令：docker attach 容器ID /bin/bash\n进入到一个初始化的环境，没有 apt-get，也没有 vi，需要重新安装。\n备注： 9999:80：端口映射。真机通过9999端口来访问虚拟机中的 html，但 html 仍运行在虚拟机的80端口上 \u0026ndash;name ：给容器取名字 -v A:B ：挂载文件，将宿主机上的A文件挂载到B路径下。可以理解为：复制了一份A文件的副本到B路径下。（也就是把Linux本机上的文件，复制一份放到容器的路径下）\n3.编辑 nginx 配置文件 进入配置文件，命令： vim etc/nginx/conf.d/default.conf root /usr/share/nginx/html 为你要访问的 html 所在路径\n进入文件后，按 i 进入编辑模式 按 esc 退出编辑模式（也称命令行模式） 在命令行模式下，按冒号进入底行模式； 在底行模式下 输入 wq：保存并退出 q!：不保存并强制退出 4. 查看是否部署成功 输入 exit 并回车，或直接按 ctrl+d 即可退出容器 重启容器，命令docker restart mynginx 使用真机进行访问，若出现下图界面则表示部署成功！ 5.部署我们的网页 将我们的网页文件拷贝到容器的/usr/share/nginx/html路径中 命令：docker cp /var/www/html 47ced0308b10:/usr/share/nginx\n备注：拷贝命令中不能出现通配符\n使用真机进行访问，若出现下图界面则表示部署成功！ 三、作业相关代码 git绑定用户： git config \u0026ndash;global user.name \u0026ldquo;cailme\u0026rdquo;\ngit config \u0026ndash;global user.email \u0026ldquo;2424254068@qq.com\u0026rdquo;\n初始化仓库：git init\n提交上传至 GitHub：\ncd homework\ngit init //把这个目录变成 Git可以管理的仓库\ngit add homework/test //git add 后可以跟单个\ngit status\necho \u0026ldquo;# 1\u0026rdquo; \u0026raquo; README.md\ngit add README.md\ngit commit -m \u0026ldquo;first commit\u0026rdquo;\ngit branch -M main\ngit remote add origin git@github.com:cailme/name.git\ngit push -u origin main\n非首次提交：\ngit remote add origin git@github.com:cailme/cailme.git\ngit branch -M main\ngit push -u origin main\nDocker容器：\n查看已有镜像：docker images\n删除已有镜像：docker rmi \u0026lt;REPOSITORY(镜像名)\u0026gt;\n#需要关闭使用此镜像运行的容器，才能删除容器\n重启容器：docker restart \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\n停止容器：docker stop \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\n强行停止容器：docker kill \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\n删除已经停止的容器：docker rm \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\n查看所有容器：docker ps -a\n进入正在运行的容器并且以命令行交互： docker exec -it 容器ID bashShell 或者 docker attach 容器ID\n从容器中拷贝文件到主机上：\ndocker cp 容器ID：容器内路径 目的主机路径\n导出:docker export 容器ID \u0026gt; abcd.tar\n安装Node.js: apt install nodejs\n运行容器：\ndocker run -it -p 60:60 server-ubuntu （ID:8ce96564e511）\ndocker run -it client-ubuntu (ID:2760297a6a3a)\n重启容器：\ndocker restart \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\ndocker restart 8ce96564e511 (server)\ndocker restart 2760297a6a3a (client)\ndocker restart 47ced0308b10（nginx）\n进入正在运行的容器：\ndocker attach 容器ID /bin/bash\ndocker attach 8ce96564e511 (server)\ndocker attach 2760297a6a3a (client)\ndocker attach 47ced0308b10（nginx）\ndocker exec -it mynginx /bin/bash\n从容器中拷贝文件到主机上：\ndocker cp 容器ID：容器内路径 目的主机路径\ndocker cp 8ce96564e51:/server/server.py /root/homework/docker/socket (server)\ndocker cp 2760297a6a3a:/client/client.py /root/homework/docker/socket (client)\ndocker cp /var/www/html/* 47ced0308b10:/usr/share/nginx/html/\n导出容器:\ndocker export 容器ID \u0026gt; name.tar\ndocker export 8ce96564e51 \u0026gt;/root/homework/docker/ubuntu.docker/server.tar\ndocker export 2760297a6a3a \u0026gt;/root/homework/docker/ubuntu.docker/client.tar\n提交新的Docker镜像实例:\ndocker commit -m \u0026ldquo;added Node.js\u0026rdquo; -a \u0026ldquo;name\u0026rdquo; docker commit -m \u0026ldquo;added Node.js\u0026rdquo; -a \u0026ldquo;cailme\u0026rdquo; 8d8d40459952 client-ubuntu\ndocker commit -m \u0026ldquo;added Node.js\u0026rdquo; -a \u0026ldquo;cailme\u0026rdquo; ed70ed5c822f server-ubuntu\n运行socket：\npython3 ./server.py\npython3 ./client.pymkdir\n导出容器：\ndocker export 8ce96564e51 \u0026gt; /root/homework/docker/ubuntu.docker/server.tar\ndocker export 2760297a6a3a \u0026gt; /root/homework/docker/ubuntu.docker/client.tar\nhugo：\n查看 Hugo 版本：hugo version\n创建个人网站：hugo new site my-blog\n克隆主题：git clone https://github.com/avianto/hugo-kiera kiera\n配置config文件：cp themes/kiera/exampleSite/config.toml .\n创建文章：hugo new posts/helloworld.md\n启动hugo服务：hugo server -D\n编译网站：hugo -t themes-name\n访问http://localhost:1313\n"
    }
,
    {
        "ref": "/blog/linux/",
        "title": "Linux笔记",
        "section": "blog",
        "tags": null,
        "date" : "2022.12.11",
        "body": "Linux的学习笔记 一、Linux路径说明 二、基本命令 1、vim编辑器： 功能：生成新文件、编辑文件、查看文件\n格式：vim file_name\n说明：上面的vi是直接进入命令模式，如果要从命令模式进入编辑模式需要按 i（插入文本） 或 a（追加文本） ，使用Esc可以退出编辑模式，返回到命令模式。 编辑模式可以插入任何文本。\n命令模式可以执行的操作：\n:w ：保存文本 :wq ：保存文本并退出 :wq! ：保存文本并强制退出 :q ：退出 :q! ：强制退出 dd ：删除一行文字 dnd ：删除n行文字 x ：删除一个字符 :n ：光标移动到n行 $ ：光标移动文本的行尾 G ：光标移动文本的末尾 /字符串 ：查找某个字符串\n2、pwd 查看用户当前所处的绝对路径\n3、系统开关、重启 退出：logout 、 exit\n重启：reboot 、shutdown -h time （等到time时间关闭系统）\n4、ls 功能：显示指定目录下的内容\n格式：ls [参数] [目录或文件]\nls（显示当前目录内容）、ls /home/test（显示制定目录下的内容）、ls -a（显示当前目录下所有的文件，包括隐藏的）\n5、cd 功能：改变当前目录\n格式：cd 目录\ncd ..（进入到当前目录的上一级目录）、cd（进入到当前用户的主目录）、cd ../../（进入到当前目录的上一级的上一级目录下）\n6、mkdir 功能：创建目录\n格式：mkdir [目录名1] [目录名2] （可以一次性创建多个目录）\n7、rmdir 功能：删除空目录\n格式：rmdir [目录名1] [目录名2] （可以一次性删除多个空目录）\n8、cp 功能：拷贝文件或目录\n格式：cp [参数] [源文件或目录] [目标文件或目录]\ncp hello file （把hello文件拷贝一份并命名为file）\ncp ./hello /home/test/myfile（把当前的hello文件拷贝一份到/home/test目录下，并命名为myfile）\n9、mv 功能：对文件或目录进行移动\n格式：mv [参数] [源对象] [目标对象]\n10、rm 功能：删除文件或非空目录\n格式：rm [参数] 文件或目录\nrm myfile（删除当前目录下的myfile文件 ）\nrm -r ./dir （删除当前目录下的dir文件，有提示 ） rm -rf ./dir （删除当前目录下的dir文件，不提示）\nrm -r 1.txt 2.txt 3.txt （删除当前目录下的多个文件）\n11、chmod 功能：修改文件的权限\n格式：chmod 权限 文件或目录 12、chown 功能：修改文件的属主\n格式：chown [参数] 用户名 文件\nchown wuxh hello （把文件hello的属主改为用户wuxh）\n13、find 功能：从指定目录查找某个文件\n格式：find 起始目录 寻找条件 文件名\nfind ./ -name 1.txt （在当前目录及其子目录中查找文件名为1.txt的文件）\n14、grep 功能：从某个文件中查找指定的字符串\n格式：grep [选项] [查找模式] [文件名]\ngrep ‘bind’ hello （从文件hello中查找字符串bind）\n15、echo 功能：在显示屏上回显文字或用来查看环境变量的值\n16、su 功能：切换用户\n格式：su [-] 用户名\nsu与su -区别：（只有切换了Shell环境才不会出现PATH错误）\nsu：只是切换了root身份，但Shell环境仍然是普通用户的Shell；\nsu -：连用户和Shell环境一起切换成root身份了\n17、clear 功能：清屏\n18、useradd、userdel 功能：添加用户 、删除用户\nuseradd wang（添加王用户）\nuserdel wang（删除wang用户，但不删除目录/home/wang）\nuserdel -r wang（删除wang用户，并删除目录/home/wang）\n19、passwd 功能：修改用户密码（如果当前用户是root，则修改的root密码）\npasswd wang （修改用户wang的密码）\npasswd （修改当前用户的密码）\n20、ps 功能：显示进程信息\nps -ef （显示当前系统中运行的进程）\nps -ef | grep pid （查询某个进程）\n21、top 功能：动态显示进程信息\n22、kill 功能：将指定的进程杀死\n格式：kill -9 进程号（强制杀死指定进程）\n23、tar 功能：将文件或目录进行打包或解压\ntar -zxvf test.tar.gz（将test.tar.gz进行解压缩并解包）\ntar -zcvf test.tar.gz /home/test（把home目录下test目录打成tar包并压缩）\n24、ifconfig 功能：查看或设置网络配置\nifconfig eth0 192.168.0.2（配置eth0的ip地址）\nifconfig eth0 down（禁用eth0网卡）\nifconfig eth0 up（启用eth0网卡）\n25、文件内容显示 cat -n myfile （查看n行myfile文件的内容）\ntail -nf myfile （显示myfile文件的后n行）\n三、 拓展 1.Docker容器常用命令： 查看已有镜像：docker images\n删除已有镜像：docker rmi \u0026lt;REPOSITORY(镜像名)\u0026gt;\n#需要关闭使用此镜像运行的容器，才能删除容器\n重启容器：docker restart \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\n停止容器：docker stop \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\n强行停止容器：docker kill \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\n删除已经停止的容器：docker rm \u0026lt;CONTAINER ID(容器ID或者name)\u0026gt;\n查看所有容器：docker ps -a\n进入正在运行的容器并且以命令行交互： docker exec -it 容器ID bashShell 或者 docker attach 容器ID\n从容器中拷贝文件到主机上：docker cp 容器ID：容器内路径 目的主机路径\n导出:docker export 容器ID \u0026gt; abcd.tar 安装Node.js: apt install nodejs\n2.git的常用命令： |git init |初始化git仓库|\n|git config user.name name|设置目标用户名|\n|git config user.email email|设置目标邮箱|\n|git config \u0026ndash;list|查看配置信息|\n|git add 文件名|将文件添加到暂存区|\n|git checkout|暂存区内容恢复到工作区|\n|git commit -m \u0026ldquo;提交说明\u0026rdquo;|将文件从暂存区添加到仓库区|\n|git log|查看提交日志|\n|git reset \u0026ndash;hard 版本号|将代码恢复到已经提交的某一个版本|\n|git branch 分支名|创建分支|\n|git checkout -b 分支名称|切换分支|\n|git branch -d 分支名称|删除分支|\n|git push URL master|将缓存区内容提交到远程仓库|\n|git pull|将远程代码下载到本地|\n|git remote add 仓库别名 仓库地址|为远程仓库添加别名|\n|git push -u 别名 分支|将缓存区内容提交到仓库|\n四、总结linux 学习Linux并不简单，如果只是单纯的在课堂上学习是不可能掌握Linux系统的，需要我们课后多花时间去训练和拓展。Liunx系统的命令有很多，如果我们每次使用代码都要去查看手册或是上网查找，会花费我们大量的时间，只有课后多练习多巩固我们才能牢牢的掌握Linux命令的使用。\n"
    }
]
